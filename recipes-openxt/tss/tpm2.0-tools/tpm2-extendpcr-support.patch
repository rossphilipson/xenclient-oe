commit e4c796ddadda49305bb24249078accacca98446b
Author: Chris Rogers <rogersc@ainfosec.com>
Date:   Thu May 18 14:40:39 2017 -0400

    [tpm2.0-tools] Extendpcr tool for OpenXT
    
      Implement new tool to extend a pcr of a specified bank with a
      specified hash.
    
    Signed-off-by: Chris Rogers <rogersc@ainfosec.com>

diff --git a/tools/tpm2_extendpcr.c b/tools/tpm2_extendpcr.c
new file mode 100644
index 0000000..43a0d93
--- /dev/null
+++ b/tools/tpm2_extendpcr.c
@@ -0,0 +1,192 @@
+//**********************************************************************;
+// Copyright (c) 2015, Intel Corporation
+// Copyright (c) 2017, Assured Information Security
+// All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+// 1. Redistributions of source code must retain the above copyright notice,
+// this list of conditions and the following disclaimer.
+//
+// 2. Redistributions in binary form must reproduce the above copyright notice,
+// this list of conditions and the following disclaimer in the documentation
+// and/or other materials provided with the distribution.
+//
+// 3. Neither the name of Intel Corporation nor the names of its contributors
+// may be used to endorse or promote products derived from this software without
+// specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+// THE POSSIBILITY OF SUCH DAMAGE.
+//**********************************************************************;
+
+#include <stdarg.h>
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#include <limits.h>
+#include <ctype.h>
+#include <getopt.h>
+
+#include <sapi/tpm20.h>
+#include <tcti/tcti_socket.h>
+#include "pcr.h"
+#include "options.h"
+#include "string-bytes.h"
+#include "tpm_session.h"
+
+int pcr_extend(TSS2_SYS_CONTEXT *sapi_context, BYTE * byteHash, UINT32 pcr, TPMI_ALG_HASH hashAlgIn)
+{
+    TPMS_AUTH_COMMAND sessionData;
+    TSS2_SYS_CMD_AUTHS sessionsData;
+    TPML_PCR_SELECTION pcrSelection;
+    TPML_DIGEST_VALUES digests;
+    TSS2_RC rval;
+
+    TPMS_AUTH_COMMAND *sessionDataArray[1];
+
+    sessionDataArray[0] = &sessionData;
+    sessionsData.cmdAuths = &sessionDataArray[0];
+
+    sessionData.sessionHandle = TPM_RS_PW;
+
+    sessionData.nonce.t.size = 0;
+    sessionData.hmac.t.size = 0;
+
+    *( (UINT8 *)((void *)&sessionData.sessionAttributes ) ) = 0;
+
+    digests.count = 1;
+    digests.digests[0].hashAlg = hashAlgIn;
+
+    switch (hashAlgIn) {
+
+        case TPM_ALG_SHA1:
+            memcpy(digests.digests[0].digest.sha1, byteHash, SHA1_DIGEST_SIZE);
+            break;
+        case TPM_ALG_SHA256:
+            memcpy(digests.digests[0].digest.sha256, byteHash, SHA256_DIGEST_SIZE);
+            break;
+        case TPM_ALG_SHA384:
+            memcpy(digests.digests[0].digest.sha384, byteHash, SHA384_DIGEST_SIZE);
+            break;
+        case TPM_ALG_SHA512:
+            memcpy(digests.digests[0].digest.sha512, byteHash, SHA512_DIGEST_SIZE);
+            break;
+        case TPM_ALG_SM3_256:
+            memcpy(digests.digests[0].digest.sha1, byteHash, SM3_256_DIGEST_SIZE);
+            break;
+        default:
+            printf("Invalid algorithm.  Exiting");
+            return -1;
+    }
+
+    pcrSelection.count = 1;
+    pcrSelection.pcrSelections[0].hash = hashAlgIn;
+    pcrSelection.pcrSelections[0].sizeofSelect = 3;
+
+    CLEAR_PCR_SELECT_BITS(pcrSelection.pcrSelections[0]);
+
+    SET_PCR_SELECT_BIT(pcrSelection.pcrSelections[0], pcr);
+
+    sessionsData.cmdAuthsCount = 1;
+    sessionsData.cmdAuths[0] = &sessionData;
+
+    rval = Tss2_Sys_PCR_Extend( sapi_context, pcr, &sessionsData, &digests, 0 );
+    if( rval != TPM_RC_SUCCESS) {
+        printf("Failed to extend PCR: %d\n", pcr);
+        return -2;
+    }
+    return 0;
+}
+
+int
+execute_tool(int                   argc,
+             char*                 argv[],
+             char*                 envp[],
+             common_opts_t         *opts,
+             TSS2_SYS_CONTEXT      *sapi_context)
+{
+    (void) opts;
+    (void) envp;
+    BYTE byteHash[SHA512_DIGEST_SIZE];
+    UINT32 pcr = -1;
+
+    setbuf(stdout, NULL);
+    setvbuf (stdout, NULL, _IONBF, BUFSIZ);
+
+    int opt = -1;
+    const char *optstring = "g:s:c:";
+    static struct option long_options[] = {
+        {"algorithm",1,NULL,'g'},
+        {"hash",1,NULL,'s'},
+        {"pcr",1,NULL,'c'},
+        {0,0,0,0}
+    };
+
+    TPMI_ALG_HASH algorithmId = 0;
+
+    int returnVal = 0;
+    int flagCnt = 0;
+    int s_flag = 0,
+        c_flag = 0,
+        g_flag = 0;
+
+    while((opt = getopt_long(argc,argv,optstring,long_options,NULL)) != -1)
+    {
+        switch(opt)
+        {
+        case 's':
+            memcpy(byteHash, optarg, sizeof(byteHash));
+            s_flag = 1;
+            break;
+        case 'c':
+            if (pcr_get_id(optarg, &pcr))
+            {
+                printf("Invalid pcr value.\n");
+                returnVal = -7;
+            }
+            c_flag = 1;
+            break;
+        case 'g':
+            if(!string_bytes_get_uint16(optarg,&algorithmId))
+            {
+                showArgError(optarg, argv[0]);
+                returnVal = -1;
+                break;
+            }
+            g_flag = 1;
+            break;
+        case ':':
+            returnVal = -8;
+            break;
+        case '?':
+            returnVal = -9;
+            break;
+        }
+        if(returnVal)
+            return returnVal;
+    };
+
+    flagCnt = g_flag + s_flag + c_flag;
+
+    if(flagCnt < 3)
+    {
+        showArgMismatch(argv[0]);
+        return -10;
+    }
+
+    returnVal = pcr_extend(sapi_context, byteHash, pcr, algorithmId);
+
+    return returnVal;
+}
