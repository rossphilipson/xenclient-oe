commit 8fabfe7daa9d9dcc86c2d14b59929a7097d8ea14
Author: Chris Rogers <rogersc@ainfosec.com>
Date:   Thu May 18 14:35:31 2017 -0400

    [tpm2.0-tools] Header and lib changes for OpenXT
    
      - Implement a pcr policy builder for sealing/unsealing
      - Various changes to library headers and source to support
        OpenXT specific changes.
    
    Signed-off-by: Chris Rogers <rogersc@ainfosec.com>

diff --git a/Makefile.am b/Makefile.am
index 9325dcc..4d3de41 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -41,7 +41,6 @@ AM_LDFLAGS   := $(EXTRA_LDFLAGS)
 LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS)
 
 sbin_PROGRAMS = \
-    tools/tpm2_create \
     tools/tpm2_createprimary \
     tools/tpm2_load \
     tools/tpm2_send_command \
@@ -76,7 +75,10 @@ sbin_PROGRAMS = \
     tools/tpm2_rsadecrypt \
     tools/tpm2_rsaencrypt \
     tools/tpm2_sign \
-    tools/tpm2_unseal
+    tools/tpm2_unseal \
+    tools/tpm2_sealdata \
+    tools/tpm2_unsealdata \
+    tools/tpm2_extendpcr
 
 noinst_LIBRARIES = $(LIB_COMMON)
 lib_libcommon_a_SOURCES = \
@@ -94,7 +96,6 @@ lib_libcommon_a_SOURCES = \
     lib/tpm_kdfa.c \
     lib/tpm_session.c
 
-tools_tpm2_create_SOURCES = tools/tpm2_create.c tools/main.c
 tools_tpm2_createprimary_SOURCES = tools/tpm2_createprimary.c tools/main.c
 tools_tpm2_dump_capability_SOURCES = tools/tpm2_dump_capability.c tools/main.c
 tools_tpm2_listpcrs_SOURCES = tools/tpm2_listpcrs.c tools/main.c
@@ -134,6 +135,9 @@ tools_tpm2_unseal_SOURCES = tools/tpm2_unseal.c tools/main.c
 
 # rc_decode does not use common main, since it does not need a dynamic TCTI.
 tools_tpm2_rc_decode_SOURCES = lib/rc-decode.c tools/tpm2_rc_decode.c
+tools_tpm2_extendpcr_SOURCES = tools/tpm2_extendpcr.c tools/main.c
+tools_tpm2_sealdata_SOURCES = tools/tpm2_sealdata.c tools/main.c tools/tpm2_create.c lib/build-policy.c
+tools_tpm2_unsealdata_SOURCES = tools/tpm2_unsealdata.c tools/main.c lib/build-policy.c
 
 if UNIT
 TESTS = $(check_PROGRAMS)
diff --git a/lib/build-policy.c b/lib/build-policy.c
new file mode 100644
index 0000000..4313c72
--- /dev/null
+++ b/lib/build-policy.c
@@ -0,0 +1,128 @@
+#include <sapi/tpm20.h>
+#include <tcti/tcti_socket.h>
+#include <stdio.h>
+#include "tpm_session.h"
+#include "tpm_hash.h"
+#include "string-bytes.h"
+#include "pcr.h"
+
+#define INIT_SIMPLE_TPM2B_SIZE( type ) (type).t.size = sizeof( type ) - 2;
+
+void zero_pcr_selection(TPML_PCR_SELECTION *pcrsIn, TPMI_ALG_HASH nameAlg)
+{
+    memset(&pcrsIn->pcrSelections[0], 0, sizeof(TPMS_PCR_SELECTION));
+    pcrsIn->count = 1; //This describes the size of pcrSelections
+    pcrsIn->pcrSelections[0].hash = nameAlg;
+    pcrsIn->pcrSelections[0].sizeofSelect = 3;
+    pcrsIn->pcrSelections[0].pcrSelect[0] = 0;
+    pcrsIn->pcrSelections[0].pcrSelect[1] = 0;
+    pcrsIn->pcrSelections[0].pcrSelect[2] = 0;
+
+}
+
+int build_pcr_policy( TSS2_SYS_CONTEXT *sysContext, SESSION *policySession, pcr_struct **pcrList, INT32 pcrCountIn, TPMI_ALG_HASH nameAlg)
+{
+    TPM2B_DIGEST pcrDigest;
+    TPML_DIGEST tmpPcrValues;
+    TPM2B_MAX_BUFFER pcrValues[24];
+    TPML_PCR_SELECTION pcrs, pcrsTmp, pcrSelectionOut;
+    UINT32 pcrUpdateCounter;
+
+    TPM_RC rval = TPM_RC_SUCCESS;
+    char empty[32] = {0};
+    zero_pcr_selection(&pcrs, nameAlg);
+
+    //Init the pcr selection we will use for the PCRPolicy call
+    for(int i = 0; i < pcrCountIn; i++)
+        SET_PCR_SELECT_BIT( pcrs.pcrSelections[0], pcrList[i]->pcr );
+
+    for(int i = 0; i < pcrCountIn; i++)
+    {
+        //No forward hash provided, need to read this pcr
+        if(!memcmp(pcrList[i]->forwardHash, empty, 32)) {
+            zero_pcr_selection(&pcrsTmp, nameAlg);
+            SET_PCR_SELECT_BIT(pcrsTmp.pcrSelections[0], pcrList[i]->pcr);
+            memset(&tmpPcrValues, 0, sizeof(TPML_DIGEST));
+            rval = Tss2_Sys_PCR_Read( sysContext, 0, &pcrsTmp, &pcrUpdateCounter, &pcrSelectionOut, &tmpPcrValues, 0 );
+            if( rval != TPM_RC_SUCCESS )
+                return rval;
+
+            pcrValues[i].t.size = tmpPcrValues.digests[0].t.size;
+            memcpy(pcrValues[i].t.buffer, tmpPcrValues.digests[0].t.buffer, tmpPcrValues.digests[0].t.size);
+        } else {
+            //Forward hash provided, copy into digest buffer
+            memcpy(pcrValues[i].t.buffer, pcrList[i]->forwardHash, sizeof(pcrList[i]->forwardHash));
+        }
+    }
+
+    // Hash them together
+    INIT_SIMPLE_TPM2B_SIZE( pcrDigest );
+    rval = hash_sequence_ex( sysContext, policySession->authHash, pcrCountIn, &pcrValues[0], &pcrDigest );
+    if( rval != TPM_RC_SUCCESS )
+        return rval;
+
+    rval = Tss2_Sys_PolicyPCR( sysContext, policySession->sessionHandle, 0, &pcrDigest, &pcrs, 0 );
+    if( rval != TPM_RC_SUCCESS )
+        return rval;
+
+   return rval;
+}
+
+int build_policy_external(TSS2_SYS_CONTEXT *sysContext, SESSION **policySession, int trial, pcr_struct **pcrList, INT32 pcrCount, TPM2B_DIGEST *policyDigestOut, TPMI_ALG_HASH nameAlg)
+{
+    TPM2B_DIGEST policyDigest;
+    TPM2B_ENCRYPTED_SECRET  encryptedSalt = { {0}, };
+    TPMT_SYM_DEF symmetric;
+    TPM_RC rval;
+    TPM2B_NONCE nonceCaller;
+
+    nonceCaller.t.size = 0;
+    policyDigest.t.size = 0;
+
+    // Start policy session.
+    symmetric.algorithm = TPM_ALG_NULL;
+    rval = tpm_session_start_auth_with_params(sysContext, policySession, TPM_RH_NULL, 0, TPM_RH_NULL, 0, &nonceCaller, &encryptedSalt,
+        trial ? TPM_SE_TRIAL : TPM_SE_POLICY, &symmetric, nameAlg);
+    if( rval != TPM_RC_SUCCESS )
+    {
+        printf("build_policy_external, Unable to Start Auth Session, Error Code: 0x%x\n", rval);
+        return rval;
+    }
+
+    // Send policy command.
+    rval = build_pcr_policy( sysContext, *policySession, pcrList, pcrCount, nameAlg);
+    if( rval != TPM_RC_SUCCESS )
+    {
+        printf("build_pcr_policy, Error Code: 0x%x\n", rval);
+        return rval;
+    }
+
+    // Get policy hash.
+    INIT_SIMPLE_TPM2B_SIZE( policyDigest );
+    rval = Tss2_Sys_PolicyGetDigest( sysContext, (*policySession)->sessionHandle,
+            0, &policyDigest, 0 );
+    if( rval != TPM_RC_SUCCESS )
+    {
+        printf("PolicyGetDigest, Error Code: 0x%x\n", rval);
+        return rval;
+    }
+
+    if( trial )
+    {
+        // Need to flush the session here.
+        rval = Tss2_Sys_FlushContext( sysContext, (*policySession)->sessionHandle );
+        if( rval != TPM_RC_SUCCESS )
+            return rval;
+
+        // And remove the session from sessions table.
+        rval = tpm_session_auth_end( *policySession );
+        if( rval != TPM_RC_SUCCESS )
+            return rval;
+    }
+
+    memcpy(policyDigestOut->t.buffer, policyDigest.t.buffer, policyDigest.t.size);
+    policyDigestOut->t.size = policyDigest.t.size;
+    return rval;
+
+}
+
diff --git a/lib/context-util.c b/lib/context-util.c
index 7b9a454..d61e913 100644
--- a/lib/context-util.c
+++ b/lib/context-util.c
@@ -142,7 +142,7 @@ sapi_ctx_init (TSS2_TCTI_CONTEXT *tcti_ctx)
         .tssVersion = TSS_SAPI_FIRST_VERSION,
     };
 
-    size = Tss2_Sys_GetContextSize (0);
+    size = Tss2_Sys_GetContextSize (12000);
     sapi_ctx = (TSS2_SYS_CONTEXT*)calloc (1, size);
     if (sapi_ctx == NULL) {
         fprintf (stderr,
diff --git a/lib/pcr.c b/lib/pcr.c
index d781ab5..f5d719b 100644
--- a/lib/pcr.c
+++ b/lib/pcr.c
@@ -7,7 +7,7 @@
 #include "pcr.h"
 #include "string-bytes.h"
 
-static int pcr_get_id(const char *arg, UINT32 *pcrId)
+int pcr_get_id(const char *arg, UINT32 *pcrId)
 {
     UINT32 n = 0;
 
@@ -61,6 +61,25 @@ static int pcr_parse_selection(const char *str, int len, TPMS_PCR_SELECTION *pcr
     return 0;
 }
 
+int pcr_parse_arg(char *arg, UINT32 *pcrId, BYTE *forwardHash)
+{
+    char * pstr;
+    UINT16 length;
+    int ret = 0;
+    if (strchr(arg, ':')) {
+        //read forward hash and convert to hex to byte
+        pstr = strtok(arg, ":");
+        if (pstr)
+            ret = pcr_get_id(pstr, pcrId);
+
+        pstr = strtok(arg, ":");
+        if (pstr)
+            hex2ByteStructure(pstr, &length, forwardHash);
+    } else {
+        ret = pcr_get_id(arg, pcrId);
+    }
+    return ret;
+}
 
 int pcr_parse_selections(const char *arg, TPML_PCR_SELECTION *pcrSels) {
     const char *strLeft = arg;
diff --git a/lib/pcr.h b/lib/pcr.h
index 4a998d2..caf976f 100644
--- a/lib/pcr.h
+++ b/lib/pcr.h
@@ -3,7 +3,29 @@
 
 #include <sapi/tpm20.h>
 
+int pcr_get_id(const char *arg, UINT32 *pcrId);
 int pcr_parse_selections(const char *arg, TPML_PCR_SELECTION *pcrSels);
 int pcr_parse_list(const char *str, int len, TPMS_PCR_SELECTION *pcrSel);
+int pcr_parse_arg(char *arg, UINT32 *pcrId, BYTE *forwardHash);
+
+typedef struct pcr_struct {
+	UINT32 pcr;
+	BYTE forwardHash[32];
+} pcr_struct;
+
+#define SET_PCR_SELECT_BIT( pcrSelection, pcr ) \
+    (pcrSelection).pcrSelect[( (pcr)/8 )] |= ( 1 << ( (pcr) % 8) );
+
+#define CLEAR_PCR_SELECT_BITS( pcrSelection ) \
+    (pcrSelection).pcrSelect[0] = 0; \
+    (pcrSelection).pcrSelect[1] = 0; \
+    (pcrSelection).pcrSelect[2] = 0;
+
+#define SET_PCR_SELECT_SIZE( pcrSelection, size ) \
+    (pcrSelection).sizeofSelect = size;
+
+#define TEST_PCR_SELECT_BIT( pcrSelection, pcr ) \
+    ((pcrSelection).pcrSelect[( (pcr)/8 )] & ( 1 << ( (pcr) % 8) ))
+
 
 #endif /* SRC_PCR_H_ */
diff --git a/lib/tpm_hash.c b/lib/tpm_hash.c
index fcd107b..a28afbb 100644
--- a/lib/tpm_hash.c
+++ b/lib/tpm_hash.c
@@ -1,4 +1,5 @@
 #include <string.h>
+#include <stdio.h>
 
 #include <sapi/tpm20.h>
 
@@ -12,7 +13,7 @@ UINT32 tpm_hash(TSS2_SYS_CONTEXT *sapi_context, TPMI_ALG_HASH hashAlg,
             TPM_RH_NULL, result, 0, 0);
 }
 
-static TPM_RC hash_sequence_ex(TSS2_SYS_CONTEXT *sapi_context,
+TPM_RC hash_sequence_ex(TSS2_SYS_CONTEXT *sapi_context,
 
     TPMI_ALG_HASH hashAlg, UINT32 numBuffers, TPM2B_MAX_BUFFER *bufferList,
     TPM2B_DIGEST *result) {
@@ -41,6 +42,7 @@ static TPM_RC hash_sequence_ex(TSS2_SYS_CONTEXT *sapi_context,
     rval = Tss2_Sys_HashSequenceStart(sapi_context, 0, &nullAuth, hashAlg,
             &sequenceHandle, 0);
     if (rval != TPM_RC_SUCCESS) {
+        printf("HashSequenceStart failed, rc=%x\n", rval);
         return rval;
     }
 
@@ -50,15 +52,18 @@ static TPM_RC hash_sequence_ex(TSS2_SYS_CONTEXT *sapi_context,
                 &cmdAuthArray, &bufferList[i], 0);
 
         if (rval != TPM_RC_SUCCESS) {
+            printf("SequenceUpdate failed, i=%d rc=%x\n", i, rval);
             return rval;
         }
     }
 
+    result->t.size = sizeof( *result ) - 2;
     rval = Tss2_Sys_SequenceComplete(sapi_context, sequenceHandle,
             &cmdAuthArray, (TPM2B_MAX_BUFFER *) &emptyBuffer,
             TPM_RH_PLATFORM, result, &validation, 0);
 
     if (rval != TPM_RC_SUCCESS) {
+        printf("SequenceComplete failed, rc=%x\n", rval);
         return rval;
     }
 
diff --git a/lib/tpm_hash.h b/lib/tpm_hash.h
index 153ce6a..9736966 100644
--- a/lib/tpm_hash.h
+++ b/lib/tpm_hash.h
@@ -5,5 +5,6 @@
 
 UINT32 tpm_hash(TSS2_SYS_CONTEXT *sapi_context, TPMI_ALG_HASH hashAlg, UINT16 size, BYTE *data, TPM2B_DIGEST *result);
 int tpm_hash_compute_data(TSS2_SYS_CONTEXT *sapi_context, BYTE *buffer, UINT16 length, TPMI_ALG_HASH halg, TPM2B_DIGEST *result);
+TPM_RC hash_sequence_ex(TSS2_SYS_CONTEXT *sapi_context, TPMI_ALG_HASH hashAlg, UINT32 numBuffers, TPM2B_MAX_BUFFER *bufferList, TPM2B_DIGEST *result);
 
 #endif /* SRC_TPM_HASH_H_ */
diff --git a/lib/tpm_session.c b/lib/tpm_session.c
index 414f1f7..6cb89ff 100644
--- a/lib/tpm_session.c
+++ b/lib/tpm_session.c
@@ -69,7 +69,7 @@ HASH_SIZE_INFO   hashSizes[] = {
     {TPM_ALG_NULL,0}
 };
 
-static UINT16 GetDigestSize( TPM_ALG_ID authHash )
+UINT16 GetDigestSize( TPM_ALG_ID authHash )
 {
     UINT32 i;
     for(i = 0; i < (sizeof(hashSizes)/sizeof(HASH_SIZE_INFO)); i++ )
diff --git a/lib/tpm_session.h b/lib/tpm_session.h
index 5e8c89e..b1643c5 100644
--- a/lib/tpm_session.h
+++ b/lib/tpm_session.h
@@ -133,4 +133,10 @@ TPM_RC tpm_session_start_auth_with_params(TSS2_SYS_CONTEXT *sapi_context, SESSIO
  */
 TPM_RC tpm_session_auth_end( SESSION *session);
 
+/**
+ * @param authHash
+ * @return
+ */
+UINT16 GetDigestSize( TPM_ALG_ID authHash);
+
 #endif /* SRC_TPM_SESSION_H_ */
diff --git a/tools/shared.h b/tools/shared.h
new file mode 100644
index 0000000..3af8624
--- /dev/null
+++ b/tools/shared.h
@@ -0,0 +1,15 @@
+#ifndef SRC_SHARED_H
+#define SRC_SHARED_H
+
+#include <sapi/tpm20.h>
+
+#include "tpm_session.h"
+#include "pcr.h"
+
+int setAlg(TPMI_ALG_PUBLIC type,TPMI_ALG_HASH nameAlg,TPM2B_PUBLIC *inPublic, int I_flag);
+
+int create(TSS2_SYS_CONTEXT *sysContext, TPMI_DH_OBJECT parentHandle, TPM2B_PUBLIC *inPublic, TPM2B_SENSITIVE_CREATE *inSensitive, TPMI_ALG_PUBLIC type, TPMI_ALG_HASH nameAlg, const char *opuFilePath, const char *oprFilePath, int o_flag, int O_flag, int I_flag, int A_flag, UINT32 objectAttributes);
+
+int build_policy_external(TSS2_SYS_CONTEXT *sysContext, SESSION **policySession, int trial, pcr_struct **pcrList, INT32 pcrCount, TPM2B_DIGEST *policyDigestOut, TPMI_ALG_HASH nameAlg);
+
+#endif /* SRC_SHARED_H */
