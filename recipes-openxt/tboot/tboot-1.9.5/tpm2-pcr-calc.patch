--- a/pcr-calc/module_hash.c	2017-04-13 11:45:54.950115414 -0400
+++ b/pcr-calc/module_hash.c	2017-04-13 13:21:28.136326848 -0400
@@ -182,7 +182,7 @@
 	return false;
 }
 
-bool hash_module(tb_hash_t *hash, const char* cmdline, const char *module, size_t size) {
+bool hash_module(tb_hash_t *hash, const char* cmdline, const char *module, size_t size, uint16_t hash_alg) {
 	tb_hash_t img_hash;
 
 	if (cmdline == NULL)
@@ -194,17 +194,17 @@
 	}
 
 	if (!hash_buffer((const unsigned char *)cmdline, strlen(cmdline), hash,
-	      TB_HALG_SHA1)) {
+	      hash_alg)) {
 		error_msg("failed to hash cmdline\n");
 		return false;
 	}
 
 	/* hash image and extend into cmdline hash */
-	if (!hash_buffer((const unsigned char *)module, size, &img_hash, TB_HALG_SHA1)) {
+	if (!hash_buffer((const unsigned char *)module, size, &img_hash, hash_alg)) {
 		error_msg("failed to hash module\n");
 		return false;
 	}
-	if (!extend_hash(hash, &img_hash, TB_HALG_SHA1)) {
+	if (!extend_hash(hash, &img_hash, hash_alg)) {
 		error_msg("failed to extend cmdline hash with  module hash\n");
 		return false;
 	}
@@ -212,6 +212,18 @@
 	return true;
 }
 
+void print_sha256(tb_hash_t *hash) {
+	int i;
+
+	if (hash == NULL)
+		return;
+
+	for (i = 0; i < SHA256_LENGTH; i++)
+		printf("%02x", hash->sha256[i]);
+
+	printf("\n");
+}
+
 void print_sha1(tb_hash_t *hash) {
 	int i;
 
@@ -224,17 +236,49 @@
 	printf("\n");
 }
 
-bool read_hash(const char *hexstr, tb_hash_t *hash) {
+void print_hash_val(tb_hash_t *hash, uint16_t hash_alg) {
+
+	switch (hash_alg) {
+		case TB_HALG_SHA1:
+			print_sha1(hash);
+			break;
+		case TB_HALG_SHA256:
+			print_sha256(hash);
+			break;
+		default:
+			printf("Error: Unsupported hash algorithm\n");
+			break;
+	}
+
+}
+
+bool read_hash(const char *hexstr, tb_hash_t *hash, uint16_t hash_alg) {
 	int len = strlen(hexstr);
 	int i = 0, j = 0;
-	unsigned char *buf = (unsigned char *)hash->sha1;
+	int hash_length = 0;
+	unsigned char *buf = NULL;
+
+	switch (hash_alg) {
+		case TB_HALG_SHA1:
+			hash_length = SHA1_LENGTH;
+			buf = (unsigned char *)hash->sha1;
+			break;
+		case TB_HALG_SHA256:
+			hash_length = SHA256_LENGTH;
+			buf = (unsigned char *)hash->sha256;
+			break;
+		default:
+			hash_length = SHA1_LENGTH;
+			buf = (unsigned char *)hash->sha1;
+			break;
+	}
 
 	if (len == 1 && hexstr[0] == '0') {
-		memset(buf, 0, SHA1_LENGTH);
+		memset(buf, 0, hash_length);
 		return true;
 	}
 
-	if (len/2 != SHA1_LENGTH)
+	if (len/2 != hash_length)
 		return false;
 
 	if (len % 2 == 1) {
@@ -259,6 +303,7 @@
 		"\t-z module is compressed with GZip\n"
 		"\t-e hash_str Extend Hash: has to be extended with module hash.\n"
 		"\t-c cmd_line Command Line: the command line passed.\n"
+		"\t-a hash algorithm to use.\n"
 		"\tmodule_file: file name of module to hash.\n");
 }
 
@@ -270,10 +315,11 @@
 	char *cmdline = NULL;
 	char *ext_str = NULL;
 	char *mod_buf = NULL;
+	uint16_t hash_alg = TB_HALG_SHA1;
 	uint8_t flags = NO_COMPRESSION;
 	tb_hash_t mod_hash, ext_hash;
 
-	while ((opt = getopt(argc, (char ** const)argv, "he:c:jz")) != -1) {
+	while ((opt = getopt(argc, (char ** const)argv, "he:c:a:jz")) != -1) {
 		switch (opt) {
 			case 'c':
 				cmdline = malloc(strlen(optarg) + 1);
@@ -319,6 +365,15 @@
 				print_help();
 				free(cmdline);
 				return 1;
+			case 'a':
+				if (!strcmp(optarg, "sha1")) {
+					hash_alg = TB_HALG_SHA1;
+				} else if(!strcmp(optarg, "sha256")) {
+					hash_alg = TB_HALG_SHA256;
+				} else {
+					hash_alg = TB_HALG_SHA1;
+				}
+			break;
 			default:
 			break;
 		}
@@ -331,24 +386,24 @@
 		goto fail;
 	}
 
-	if (hash_module(&mod_hash, cmdline, mod_buf, mod_len) == false) {
+	if (hash_module(&mod_hash, cmdline, mod_buf, mod_len, hash_alg) == false) {
 		error_msg("failed to hash the module\n");
 		goto fail;
 	}
 
 	if (ext_str != NULL) {
-		if (read_hash(ext_str, &ext_hash) == false) {
+		if (read_hash(ext_str, &ext_hash, hash_alg) == false) {
 			error_msg("failed to pass valid hash to -e\n");
 			goto fail;
 		}
-		if (extend_hash(&ext_hash, &mod_hash, TB_HALG_SHA1) == false) {
+		if (extend_hash(&ext_hash, &mod_hash, hash_alg) == false) {
 			error_msg("failed to extend hash\n");
 			goto fail;
 		}
 
-		print_sha1(&ext_hash);
+		print_hash_val(&ext_hash, hash_alg);
 	} else {
-		print_sha1(&mod_hash);
+		print_hash_val(&mod_hash, hash_alg);
 	}
 
 	if (ext_str != NULL) free(ext_str);
