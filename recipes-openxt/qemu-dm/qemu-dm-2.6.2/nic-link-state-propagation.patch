Index: qemu-2.6.2/include/hw/xen/xen.h
===================================================================
--- qemu-2.6.2.orig/include/hw/xen/xen.h
+++ qemu-2.6.2/include/hw/xen/xen.h
@@ -33,6 +33,9 @@ void xen_piix_pci_write_config_client(ui
 void xen_hvm_inject_msi(uint64_t addr, uint32_t data);
 int xen_is_pirq_msi(uint32_t msi_data);
 
+int xenstore_register_nic(NetClientState *nc);
+int xenstore_unregister_nic(NetClientState *nc);
+
 qemu_irq *xen_interrupt_controller_init(void);
 
 void xenstore_store_pv_console_info(int i, struct CharDriverState *chr);
Index: qemu-2.6.2/hw/xen/xen_backend.c
===================================================================
--- qemu-2.6.2.orig/hw/xen/xen_backend.c
+++ qemu-2.6.2/hw/xen/xen_backend.c
@@ -30,6 +30,7 @@
 #include "sysemu/char.h"
 #include "qemu/log.h"
 #include "hw/xen/xen_backend.h"
+#include "qmp-commands.h"
 
 #include <xen/grant_table.h>
 
@@ -607,6 +608,199 @@ static int xenstore_scan(const char *typ
     return 0;
 }
 
+/*
+ * OpenXT: Get type and id from \([a-zA-Z]\\{1,XENSTORE_NET_TYPE_LEN - 1\}\)\([0-9]\{1,XENSTORE_NET_ID_LEN\}\).
+ *
+ * @param name is a null terminated character string.
+ * @param type is able to store at least XENSTORE_NET_TYPE_LEN bytes.
+ * @param id is able to store at least XENSTORE_NET_ID_LEN bytes.
+ * @return 0 on success, -ERRNO else.
+ */
+/* Define constants for network devices XenStore data representation. */
+#define XENSTORE_NET_TYPE_LEN   5   /* Currently "vif"|"vwif" */
+#define XENSTORE_NET_ID_LEN     5
+static int xenstore_nic_parse_name(const char *name, char *type, char *id)
+{
+    size_t i;
+
+    assert(name);
+    assert(type);
+    assert(id);
+
+    for (i = 0; isalpha(*name) && (i < XENSTORE_NET_TYPE_LEN - 1); ++i) {
+        type[i] = *(name++);
+    }
+    if (!i) {
+        return -EINVAL;
+    }
+    type[i] = '\0';
+
+    for (i = 0; isdigit(*name) && (i < XENSTORE_NET_ID_LEN - 1); ++i) {
+        id[i] = *(name++);
+    }
+    if (!i) {
+        return -EINVAL;
+    }
+    id[i] = '\0';
+
+    return 0;
+}
+
+/*
+ * OpenXT: Fill base with the Xenstore path of the network backend for that NICInfo element.
+ *
+ * @param ni a valid pointer to a NICInfo, likely an element of nd_table.
+ * @param base is able to store at least XEN_BUFSIZE bytes.
+ * @return 0 on success, -ERRNO else.
+ */
+static int xenstore_get_nic_path(const NICInfo *ni, char *base)
+{
+    char *dompath;
+    char type[XENSTORE_NET_TYPE_LEN];
+    char id[XENSTORE_NET_ID_LEN];
+
+    assert(ni);
+    assert(base);
+
+    if (xenstore_nic_parse_name(ni->name, type, id)) {
+        fprintf(stderr, "failed to parse nic backend xenstore name `%s'.\n", ni->name);
+        return -EINVAL;
+    }
+    dompath = xs_get_domain_path(xenstore, xen_domid);
+    if (!dompath) {
+        fprintf(stderr, "Could not retrieve domain path.\n");
+        return -ENOENT;
+    }
+    snprintf(base, XEN_BUFSIZE, "%s/device/%s/%s", dompath, type, id);
+    free(dompath);
+
+    return 0;
+}
+
+/*
+ * OpenXT: Return the NICInfo entry of the backend peered with the given NetClientState.
+ *
+ * @param ncs a valid pointer to a NetClientState.
+ * @return a pointer to the corresponding NICInfo, NULL else.
+ */
+static /* const */ NICInfo *qemu_find_nicinfo(const NetClientState *ncs)
+{
+    size_t i;
+
+    assert(ncs);
+    assert(ncs->info);
+    assert(ncs->info->type == NET_CLIENT_OPTIONS_KIND_NIC);
+
+    for (i = 0; i < MAX_NICS; ++i) {
+        if (nd_table[i].used && nd_table[i].name &&
+            nd_table[i].netdev == ncs->peer) {
+            return &nd_table[i];
+        }
+    }
+    return NULL;
+}
+
+/*
+ * OpenXT: Read Xenstore for link-state change to be forwarded to the NetClients of this netdev.
+ *
+ * @param opaque a valid pointer to a NICInfo object.
+ */
+static void xenstore_update_nic(void *opaque)
+{
+    const NICInfo *ni = opaque;
+    char base[XEN_BUFSIZE];
+    int val;
+
+    assert(opaque);
+    assert(ni->used);
+    assert(ni->netdev);
+    assert(ni->netdev->peer);
+
+    if (xenstore_get_nic_path(ni, base)) {
+        fprintf(stderr, "Could not find xenstore path for dom%d NIC `%s'.\n", xen_domid, ni->name);
+        return;
+    }
+    if (xenstore_read_int(base, "disconnect", &val)) {
+        fprintf(stderr, "failed to read xenstore path (%s/%s).\n", base, "disconnect");
+        return;
+    }
+
+    NetClientState *ncs = ni->netdev->peer;
+    if (ncs->link_down != !!val) {
+        /* notify the emulation through qmp.
+         * note that qmp_set_link boolean is "link-up?",
+         * not nc->link_down "link-down?". */
+        qmp_set_link(ncs->name, !val, NULL);
+        fprintf(stderr, "%s (%s): link status is now %s.\n",
+                ncs->name, ni->name, !!val ? "down" : "up");
+    }
+}
+
+/*
+ * OpenXT: Register a Net Client in Xenstore.
+ *
+ * @param ncs a valid pointer to a NetClientState object.
+ * @return 0 on success, -ERRNO else.
+ */
+int xenstore_register_nic(NetClientState *ncs)
+{
+    char base[XEN_BUFSIZE];
+    /* const */ NICInfo *ni;
+
+    assert(ncs);
+    assert(ncs->info);
+    assert(ncs->info->type == NET_CLIENT_OPTIONS_KIND_NIC);
+
+    ni = qemu_find_nicinfo(ncs);
+    if (!ni) {
+        fprintf(stderr, "Failed to find backend device for emulated NIC `%s'.\n", ncs->name);
+        return -ENODEV;
+    }
+    if (xenstore_get_nic_path(ni, base)) {
+        fprintf(stderr, "Could not find xenstore path for dom%d NIC `%s'.\n", xen_domid, ni->name);
+        return -ENOENT;
+    }
+    if (xenstore_add_watch(base, "disconnect", xenstore_update_nic, ni)) {
+        fprintf(stderr, "Could not install xenstore watch on path `%s/disconnect'.\n", base);
+        return -1;
+    }
+    xenstore_update_nic(ni);
+
+    return 0;
+}
+
+/*
+ * OpenXT: Unregister a Net Client in Xenstore.
+ * Called when a device is removed and no longer used.
+ *
+ * @param ncs a valid pointer to a NetClientState object.
+ * @return 0 on success, -ERRNO else.
+ */
+int xenstore_unregister_nic(NetClientState *ncs)
+{
+    char base[XEN_BUFSIZE];
+    /* const */ NICInfo *ni;
+
+    assert(ncs);
+    assert(ncs->info);
+    assert(ncs->info->type == NET_CLIENT_OPTIONS_KIND_NIC);
+
+    ni = qemu_find_nicinfo(ncs);
+    if (!ni) {
+        fprintf(stderr, "Failed to find backend device for emulated NIC `%s'.\n", ncs->name);
+        return -ENODEV;
+    }
+    if (xenstore_get_nic_path(ni, base)) {
+        fprintf(stderr, "Could not find xenstore path for dom%d NIC `%s'.\n", xen_domid, ni->name);
+        return -ENOENT;
+    }
+    if (xenstore_remove_watch(base, "disconnect", xenstore_update_nic, ni)) {
+        fprintf(stderr, "Could not install xenstore watch on path `%s/disconnect'.\n", base);
+        return -1;
+    }
+    return 0;
+}
+
 static void xenstore_update_be(char *watch, char *type, int dom,
                                struct XenDevOps *ops)
 {
Index: qemu-2.6.2/net/net.c
===================================================================
--- qemu-2.6.2.orig/net/net.c
+++ qemu-2.6.2/net/net.c
@@ -48,6 +48,9 @@
 #include "net/filter.h"
 #include "qapi/string-output-visitor.h"
 
+/* OpenXT: xenstore_register_nic() and xenstore_unregister_nic(). */
+#include "hw/xen/xen.h"
+
 /* Net bridge is currently not supported for W32. */
 #if !defined(_WIN32)
 # define CONFIG_NET_BRIDGE
@@ -278,6 +281,12 @@ NetClientState *qemu_new_net_client(NetC
     qemu_net_client_setup(nc, info, peer, model, name,
                           qemu_net_client_destructor);
 
+    /* OpenXT: Register the new NetClientState to Xenstore.
+     * Required for link-state propagation logic. */
+    if (xen_enabled()) {
+        xenstore_register_nic(nc);
+    }
+
     return nc;
 }
 
@@ -336,6 +345,11 @@ static void qemu_cleanup_net_client(NetC
 {
     QTAILQ_REMOVE(&net_clients, nc, next);
 
+    /* OpenXT: Unregister NetClientState from Xenstore. */
+    if (xen_enabled()) {
+        xenstore_unregister_nic(nc);
+    }
+
     if (nc->info->cleanup) {
         nc->info->cleanup(nc);
     }
