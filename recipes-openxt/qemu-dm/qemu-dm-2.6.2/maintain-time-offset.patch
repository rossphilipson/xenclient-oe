Index: qemu-2.6.2/xen-hvm.c
===================================================================
--- qemu-2.6.2.orig/xen-hvm.c
+++ qemu-2.6.2/xen-hvm.c
@@ -884,6 +884,47 @@ static void cpu_ioreq_move(ioreq_t *req)
     }
 }
 
+static void timeoffset_init(void)
+{
+    char *vmstr = xenstore_vm_base_path();
+    int time_offset;
+
+    if (!vmstr) {
+        fprintf(stderr, "timeoffset_init failed to read vm key\n");
+        return;
+    }
+
+    if (xenstore_read_int(vmstr, "rtc/timeoffset", &time_offset) != 0) {
+        fprintf(stderr, "timeoffset_init failed to read from xenstore!\n");
+        return;
+    }
+
+    fprintf(stderr, "timeoffset_init setting offset = %d\n", time_offset);
+
+    xc_domain_set_time_offset(xen_xc, xen_domid, time_offset);
+
+    g_free(vmstr);
+}
+
+static void cpu_ioreq_timeoffset(ioreq_t *req)
+{
+    char *vmstr = xenstore_vm_base_path();
+    int time_offset;
+
+    if (!vmstr) {
+        fprintf(stderr, "cpu_ioreq_timeoffset failed to read vm key\n");
+        return;
+    }
+
+    time_offset = (int)req->data;
+
+    fprintf(stderr, "cpu_ioreq_timeoffset writing offset = %d\n", time_offset);
+
+    xenstore_write_int(vmstr, "rtc/timeoffset", time_offset);
+
+    g_free(vmstr);
+}
+
 static void regs_to_cpu(vmware_regs_t *vmport_regs, ioreq_t *req)
 {
     X86CPU *cpu;
@@ -952,6 +993,7 @@ static void handle_ioreq(XenIOState *sta
             handle_vmport_ioreq(state, req);
             break;
         case IOREQ_TYPE_TIMEOFFSET:
+            cpu_ioreq_timeoffset(req);
             break;
         case IOREQ_TYPE_INVALIDATE:
             xen_invalidate_map_cache();
@@ -1351,6 +1393,10 @@ void xen_hvm_init(PCMachineState *pcms,
 #endif
 
     xen_read_physmap(state);
+
+    /* Initialize time offset */
+    timeoffset_init();
+
     return;
 
 err:
